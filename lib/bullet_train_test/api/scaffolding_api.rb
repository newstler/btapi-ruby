=begin
#Bullet Train Test

#You can update this description in `config/locales/en/application.en.yml`.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module BulletTrainTest
  class ScaffoldingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_v1_scaffolding_absolutely_abstract_creative_concepts_id(id, opts = {})
      delete_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts)
      nil
    end

    # Delete a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.delete_v1_scaffolding_absolutely_abstract_creative_concepts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.delete_v1_scaffolding_absolutely_abstract_creative_concepts_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.delete_v1_scaffolding_absolutely_abstract_creative_concepts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#delete_v1_scaffolding_absolutely_abstract_creative_concepts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_v1_scaffolding_completely_concrete_tangible_things_id(id, opts = {})
      delete_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts)
      nil
    end

    # Delete a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.delete_v1_scaffolding_completely_concrete_tangible_things_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.delete_v1_scaffolding_completely_concrete_tangible_things_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.delete_v1_scaffolding_completely_concrete_tangible_things_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#delete_v1_scaffolding_completely_concrete_tangible_things_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tangible Things
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer>]
    def get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things(absolutely_abstract_creative_concept_id, opts = {})
      data, _status_code, _headers = get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts)
      data
    end

    # List Tangible Things
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @return [Array<(Array<ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer>, Integer, Hash)>] Array<ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer> data, response status code and response headers
    def get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things ...'
      end
      # verify the required parameter 'absolutely_abstract_creative_concept_id' is set
      if @api_client.config.client_side_validation && absolutely_abstract_creative_concept_id.nil?
        fail ArgumentError, "Missing the required parameter 'absolutely_abstract_creative_concept_id' when calling ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things"
      end
      # resource path
      local_var_path = '/v1/scaffolding/absolutely_abstract/creative_concepts/{absolutely_abstract_creative_concept_id}/completely_concrete/tangible_things'.sub('{' + 'absolutely_abstract_creative_concept_id' + '}', CGI.escape(absolutely_abstract_creative_concept_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#get_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer]
    def get_v1_scaffolding_absolutely_abstract_creative_concepts_id(id, opts = {})
      data, _status_code, _headers = get_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts)
      data
    end

    # Retrieve a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer, Integer, Hash)>] ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer data, response status code and response headers
    def get_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.get_v1_scaffolding_absolutely_abstract_creative_concepts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#get_v1_scaffolding_absolutely_abstract_creative_concepts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer]
    def get_v1_scaffolding_completely_concrete_tangible_things_id(id, opts = {})
      data, _status_code, _headers = get_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts)
      data
    end

    # Retrieve a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer, Integer, Hash)>] ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer data, response status code and response headers
    def get_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.get_v1_scaffolding_completely_concrete_tangible_things_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.get_v1_scaffolding_completely_concrete_tangible_things_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.get_v1_scaffolding_completely_concrete_tangible_things_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#get_v1_scaffolding_completely_concrete_tangible_things_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Tangible Thing
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer]
    def post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things(absolutely_abstract_creative_concept_id, opts = {})
      data, _status_code, _headers = post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts)
      data
    end

    # Add a New Tangible Thing
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer, Integer, Hash)>] ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer data, response status code and response headers
    def post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things ...'
      end
      # verify the required parameter 'absolutely_abstract_creative_concept_id' is set
      if @api_client.config.client_side_validation && absolutely_abstract_creative_concept_id.nil?
        fail ArgumentError, "Missing the required parameter 'absolutely_abstract_creative_concept_id' when calling ScaffoldingApi.post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things"
      end
      # resource path
      local_var_path = '/v1/scaffolding/absolutely_abstract/creative_concepts/{absolutely_abstract_creative_concept_id}/completely_concrete/tangible_things'.sub('{' + 'absolutely_abstract_creative_concept_id' + '}', CGI.escape(absolutely_abstract_creative_concept_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#post_v1_scaffolding_absolutely_abstract_creative_concepts_absolutely_abstract_creative_concept_id_completely_concrete_tangible_things\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer]
    def put_v1_scaffolding_absolutely_abstract_creative_concepts_id(id, opts = {})
      data, _status_code, _headers = put_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts)
      data
    end

    # Update a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer, Integer, Hash)>] ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer data, response status code and response headers
    def put_v1_scaffolding_absolutely_abstract_creative_concepts_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.put_v1_scaffolding_absolutely_abstract_creative_concepts_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.put_v1_scaffolding_absolutely_abstract_creative_concepts_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1ScaffoldingAbsolutelyAbstractCreativeConceptSerializer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.put_v1_scaffolding_absolutely_abstract_creative_concepts_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#put_v1_scaffolding_absolutely_abstract_creative_concepts_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer]
    def put_v1_scaffolding_completely_concrete_tangible_things_id(id, opts = {})
      data, _status_code, _headers = put_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts)
      data
    end

    # Update a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer, Integer, Hash)>] ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer data, response status code and response headers
    def put_v1_scaffolding_completely_concrete_tangible_things_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScaffoldingApi.put_v1_scaffolding_completely_concrete_tangible_things_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScaffoldingApi.put_v1_scaffolding_completely_concrete_tangible_things_id"
      end
      # resource path
      local_var_path = '/v1/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiV1ScaffoldingCompletelyConcreteTangibleThingSerializer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ScaffoldingApi.put_v1_scaffolding_completely_concrete_tangible_things_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScaffoldingApi#put_v1_scaffolding_completely_concrete_tangible_things_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
