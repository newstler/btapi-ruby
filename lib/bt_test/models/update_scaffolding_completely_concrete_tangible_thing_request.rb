=begin
#BT Test

#You can update this description in `config/locales/en/application.en.yml`.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module BtTest
  class UpdateScaffoldingCompletelyConcreteTangibleThingRequest
    # Text Field Value
    attr_accessor :text_field_value

    # Button Value
    attr_accessor :button_value

    # Cloudinary Image Value
    attr_accessor :cloudinary_image_value

    # Date Field Value
    attr_accessor :date_field_value

    # Date and Time Field Value
    attr_accessor :date_and_time_field_value

    # Email Field Value
    attr_accessor :email_field_value

    # Password Field Value
    attr_accessor :password_field_value

    # Phone Field Value
    attr_accessor :phone_field_value

    # Option Value
    attr_accessor :option_value

    # Super Select Value
    attr_accessor :super_select_value

    # Text Area Value
    attr_accessor :text_area_value

    # Trix Editor Value
    attr_accessor :action_text_value

    # Multiple Button Values
    attr_accessor :multiple_button_values

    # Multiple Option Values
    attr_accessor :multiple_option_values

    # Multiple Super Select Values
    attr_accessor :multiple_super_select_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'text_field_value' => :'text_field_value',
        :'button_value' => :'button_value',
        :'cloudinary_image_value' => :'cloudinary_image_value',
        :'date_field_value' => :'date_field_value',
        :'date_and_time_field_value' => :'date_and_time_field_value',
        :'email_field_value' => :'email_field_value',
        :'password_field_value' => :'password_field_value',
        :'phone_field_value' => :'phone_field_value',
        :'option_value' => :'option_value',
        :'super_select_value' => :'super_select_value',
        :'text_area_value' => :'text_area_value',
        :'action_text_value' => :'action_text_value',
        :'multiple_button_values' => :'multiple_button_values[]',
        :'multiple_option_values' => :'multiple_option_values[]',
        :'multiple_super_select_values' => :'multiple_super_select_values[]'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'text_field_value' => :'String',
        :'button_value' => :'String',
        :'cloudinary_image_value' => :'String',
        :'date_field_value' => :'Date',
        :'date_and_time_field_value' => :'Time',
        :'email_field_value' => :'String',
        :'password_field_value' => :'String',
        :'phone_field_value' => :'String',
        :'option_value' => :'String',
        :'super_select_value' => :'String',
        :'text_area_value' => :'String',
        :'action_text_value' => :'String',
        :'multiple_button_values' => :'Array<String>',
        :'multiple_option_values' => :'Array<String>',
        :'multiple_super_select_values' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BtTest::UpdateScaffoldingCompletelyConcreteTangibleThingRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BtTest::UpdateScaffoldingCompletelyConcreteTangibleThingRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'text_field_value')
        self.text_field_value = attributes[:'text_field_value']
      end

      if attributes.key?(:'button_value')
        self.button_value = attributes[:'button_value']
      end

      if attributes.key?(:'cloudinary_image_value')
        self.cloudinary_image_value = attributes[:'cloudinary_image_value']
      end

      if attributes.key?(:'date_field_value')
        self.date_field_value = attributes[:'date_field_value']
      end

      if attributes.key?(:'date_and_time_field_value')
        self.date_and_time_field_value = attributes[:'date_and_time_field_value']
      end

      if attributes.key?(:'email_field_value')
        self.email_field_value = attributes[:'email_field_value']
      end

      if attributes.key?(:'password_field_value')
        self.password_field_value = attributes[:'password_field_value']
      end

      if attributes.key?(:'phone_field_value')
        self.phone_field_value = attributes[:'phone_field_value']
      end

      if attributes.key?(:'option_value')
        self.option_value = attributes[:'option_value']
      end

      if attributes.key?(:'super_select_value')
        self.super_select_value = attributes[:'super_select_value']
      end

      if attributes.key?(:'text_area_value')
        self.text_area_value = attributes[:'text_area_value']
      end

      if attributes.key?(:'action_text_value')
        self.action_text_value = attributes[:'action_text_value']
      end

      if attributes.key?(:'multiple_button_values')
        if (value = attributes[:'multiple_button_values']).is_a?(Array)
          self.multiple_button_values = value
        end
      end

      if attributes.key?(:'multiple_option_values')
        if (value = attributes[:'multiple_option_values']).is_a?(Array)
          self.multiple_option_values = value
        end
      end

      if attributes.key?(:'multiple_super_select_values')
        if (value = attributes[:'multiple_super_select_values']).is_a?(Array)
          self.multiple_super_select_values = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          text_field_value == o.text_field_value &&
          button_value == o.button_value &&
          cloudinary_image_value == o.cloudinary_image_value &&
          date_field_value == o.date_field_value &&
          date_and_time_field_value == o.date_and_time_field_value &&
          email_field_value == o.email_field_value &&
          password_field_value == o.password_field_value &&
          phone_field_value == o.phone_field_value &&
          option_value == o.option_value &&
          super_select_value == o.super_select_value &&
          text_area_value == o.text_area_value &&
          action_text_value == o.action_text_value &&
          multiple_button_values == o.multiple_button_values &&
          multiple_option_values == o.multiple_option_values &&
          multiple_super_select_values == o.multiple_super_select_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [text_field_value, button_value, cloudinary_image_value, date_field_value, date_and_time_field_value, email_field_value, password_field_value, phone_field_value, option_value, super_select_value, text_area_value, action_text_value, multiple_button_values, multiple_option_values, multiple_super_select_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BtTest.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
