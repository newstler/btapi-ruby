=begin
#BT Test

#You can update this description in `config/locales/en/application.en.yml`.

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'cgi'

module BtTest
  class V1Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a New Goal
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGoalRequest] :create_goal_request 
    # @return [Goal]
    def create_goal(project_id, opts = {})
      data, _status_code, _headers = create_goal_with_http_info(project_id, opts)
      data
    end

    # Add a New Goal
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGoalRequest] :create_goal_request 
    # @return [Array<(Goal, Integer, Hash)>] Goal data, response status code and response headers
    def create_goal_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_goal ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling V1Api.create_goal"
      end
      # resource path
      local_var_path = '/projects/{project_id}/goals'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_goal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Goal'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Project
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectRequest] :create_project_request 
    # @return [Project]
    def create_project(team_id, opts = {})
      data, _status_code, _headers = create_project_with_http_info(team_id, opts)
      data
    end

    # Add a New Project
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectRequest] :create_project_request 
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_project ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.create_project"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_project_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Tag
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectsTagRequest] :create_projects_tag_request 
    # @return [ProjectsTag]
    def create_projects_tag(team_id, opts = {})
      data, _status_code, _headers = create_projects_tag_with_http_info(team_id, opts)
      data
    end

    # Add a New Tag
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectsTagRequest] :create_projects_tag_request 
    # @return [Array<(ProjectsTag, Integer, Hash)>] ProjectsTag data, response status code and response headers
    def create_projects_tag_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_projects_tag ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.create_projects_tag"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects/tags'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_projects_tag_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_projects_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_projects_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Creative Concept
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateScaffoldingAbsolutelyAbstractCreativeConceptRequest] :create_scaffolding_absolutely_abstract_creative_concept_request 
    # @return [ScaffoldingAbsolutelyAbstractCreativeConcept]
    def create_scaffolding_absolutely_abstract_creative_concept(team_id, opts = {})
      data, _status_code, _headers = create_scaffolding_absolutely_abstract_creative_concept_with_http_info(team_id, opts)
      data
    end

    # Add a New Creative Concept
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateScaffoldingAbsolutelyAbstractCreativeConceptRequest] :create_scaffolding_absolutely_abstract_creative_concept_request 
    # @return [Array<(ScaffoldingAbsolutelyAbstractCreativeConcept, Integer, Hash)>] ScaffoldingAbsolutelyAbstractCreativeConcept data, response status code and response headers
    def create_scaffolding_absolutely_abstract_creative_concept_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_scaffolding_absolutely_abstract_creative_concept ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.create_scaffolding_absolutely_abstract_creative_concept"
      end
      # resource path
      local_var_path = '/teams/{team_id}/scaffolding/absolutely_abstract/creative_concepts'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_scaffolding_absolutely_abstract_creative_concept_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingAbsolutelyAbstractCreativeConcept'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_scaffolding_absolutely_abstract_creative_concept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_scaffolding_absolutely_abstract_creative_concept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Tangible Thing
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateScaffoldingCompletelyConcreteTangibleThingRequest] :update_scaffolding_completely_concrete_tangible_thing_request 
    # @return [ScaffoldingCompletelyConcreteTangibleThing]
    def create_scaffolding_completely_concrete_tangible_thing(absolutely_abstract_creative_concept_id, opts = {})
      data, _status_code, _headers = create_scaffolding_completely_concrete_tangible_thing_with_http_info(absolutely_abstract_creative_concept_id, opts)
      data
    end

    # Add a New Tangible Thing
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateScaffoldingCompletelyConcreteTangibleThingRequest] :update_scaffolding_completely_concrete_tangible_thing_request 
    # @return [Array<(ScaffoldingCompletelyConcreteTangibleThing, Integer, Hash)>] ScaffoldingCompletelyConcreteTangibleThing data, response status code and response headers
    def create_scaffolding_completely_concrete_tangible_thing_with_http_info(absolutely_abstract_creative_concept_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_scaffolding_completely_concrete_tangible_thing ...'
      end
      # verify the required parameter 'absolutely_abstract_creative_concept_id' is set
      if @api_client.config.client_side_validation && absolutely_abstract_creative_concept_id.nil?
        fail ArgumentError, "Missing the required parameter 'absolutely_abstract_creative_concept_id' when calling V1Api.create_scaffolding_completely_concrete_tangible_thing"
      end
      # resource path
      local_var_path = '/scaffolding/absolutely_abstract/creative_concepts/{absolutely_abstract_creative_concept_id}/completely_concrete/tangible_things'.sub('{' + 'absolutely_abstract_creative_concept_id' + '}', CGI.escape(absolutely_abstract_creative_concept_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_scaffolding_completely_concrete_tangible_thing_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingCompletelyConcreteTangibleThing'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_scaffolding_completely_concrete_tangible_thing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_scaffolding_completely_concrete_tangible_thing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Team
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamRequest] :create_team_request 
    # @return [Team]
    def create_team(opts = {})
      data, _status_code, _headers = create_team_with_http_info(opts)
      data
    end

    # Add a New Team
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamRequest] :create_team_request 
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def create_team_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_team ...'
      end
      # resource path
      local_var_path = '/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_team_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a New Endpoint
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWebhooksOutgoingEndpointRequest] :create_webhooks_outgoing_endpoint_request 
    # @return [WebhooksOutgoingEndpoint]
    def create_webhooks_outgoing_endpoint(team_id, opts = {})
      data, _status_code, _headers = create_webhooks_outgoing_endpoint_with_http_info(team_id, opts)
      data
    end

    # Add a New Endpoint
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWebhooksOutgoingEndpointRequest] :create_webhooks_outgoing_endpoint_request 
    # @return [Array<(WebhooksOutgoingEndpoint, Integer, Hash)>] WebhooksOutgoingEndpoint data, response status code and response headers
    def create_webhooks_outgoing_endpoint_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.create_webhooks_outgoing_endpoint ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.create_webhooks_outgoing_endpoint"
      end
      # resource path
      local_var_path = '/teams/{team_id}/webhooks/outgoing/endpoints'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_webhooks_outgoing_endpoint_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhooksOutgoingEndpoint'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.create_webhooks_outgoing_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#create_webhooks_outgoing_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal(id, opts = {})
      delete_goal_with_http_info(id, opts)
      nil
    end

    # Delete a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_goal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_goal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_goal"
      end
      # resource path
      local_var_path = '/goals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project(id, opts = {})
      delete_project_with_http_info(id, opts)
      nil
    end

    # Delete a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_projects_tag(id, opts = {})
      delete_projects_tag_with_http_info(id, opts)
      nil
    end

    # Delete a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_projects_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_projects_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_projects_tag"
      end
      # resource path
      local_var_path = '/projects/tags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_projects_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_projects_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scaffolding_absolutely_abstract_creative_concept(id, opts = {})
      delete_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts)
      nil
    end

    # Delete a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_scaffolding_absolutely_abstract_creative_concept ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_scaffolding_absolutely_abstract_creative_concept"
      end
      # resource path
      local_var_path = '/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_scaffolding_absolutely_abstract_creative_concept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_scaffolding_absolutely_abstract_creative_concept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scaffolding_completely_concrete_tangible_thing(id, opts = {})
      delete_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts)
      nil
    end

    # Delete a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_scaffolding_completely_concrete_tangible_thing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_scaffolding_completely_concrete_tangible_thing"
      end
      # resource path
      local_var_path = '/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_scaffolding_completely_concrete_tangible_thing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_scaffolding_completely_concrete_tangible_thing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_webhooks_outgoing_endpoint(id, opts = {})
      delete_webhooks_outgoing_endpoint_with_http_info(id, opts)
      nil
    end

    # Delete a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_webhooks_outgoing_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_webhooks_outgoing_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_webhooks_outgoing_endpoint"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/endpoints/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.delete_webhooks_outgoing_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_webhooks_outgoing_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def get_goal(id, opts = {})
      data, _status_code, _headers = get_goal_with_http_info(id, opts)
      data
    end

    # Retrieve a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Integer, Hash)>] Goal data, response status code and response headers
    def get_goal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_goal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_goal"
      end
      # resource path
      local_var_path = '/goals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Goal'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve info about the current user
    # @param [Hash] opts the optional parameters
    # @return [Me]
    def get_me(opts = {})
      data, _status_code, _headers = get_me_with_http_info(opts)
      data
    end

    # Retrieve info about the current user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Me, Integer, Hash)>] Me data, response status code and response headers
    def get_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_me ...'
      end
      # resource path
      local_var_path = '/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Me'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_me",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def get_project(id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(id, opts)
      data
    end

    # Retrieve a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def get_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @return [ProjectsTag]
    def get_projects_tag(id, opts = {})
      data, _status_code, _headers = get_projects_tag_with_http_info(id, opts)
      data
    end

    # Retrieve a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectsTag, Integer, Hash)>] ProjectsTag data, response status code and response headers
    def get_projects_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_projects_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_projects_tag"
      end
      # resource path
      local_var_path = '/projects/tags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_projects_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_projects_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [ScaffoldingAbsolutelyAbstractCreativeConcept]
    def get_scaffolding_absolutely_abstract_creative_concept(id, opts = {})
      data, _status_code, _headers = get_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts)
      data
    end

    # Retrieve a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScaffoldingAbsolutelyAbstractCreativeConcept, Integer, Hash)>] ScaffoldingAbsolutelyAbstractCreativeConcept data, response status code and response headers
    def get_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_scaffolding_absolutely_abstract_creative_concept ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_scaffolding_absolutely_abstract_creative_concept"
      end
      # resource path
      local_var_path = '/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingAbsolutelyAbstractCreativeConcept'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_scaffolding_absolutely_abstract_creative_concept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_scaffolding_absolutely_abstract_creative_concept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [ScaffoldingCompletelyConcreteTangibleThing]
    def get_scaffolding_completely_concrete_tangible_thing(id, opts = {})
      data, _status_code, _headers = get_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts)
      data
    end

    # Retrieve a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScaffoldingCompletelyConcreteTangibleThing, Integer, Hash)>] ScaffoldingCompletelyConcreteTangibleThing data, response status code and response headers
    def get_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_scaffolding_completely_concrete_tangible_thing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_scaffolding_completely_concrete_tangible_thing"
      end
      # resource path
      local_var_path = '/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingCompletelyConcreteTangibleThing'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_scaffolding_completely_concrete_tangible_thing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_scaffolding_completely_concrete_tangible_thing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Team
    # @param id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @return [Team]
    def get_team(id, opts = {})
      data, _status_code, _headers = get_team_with_http_info(id, opts)
      data
    end

    # Retrieve a Team
    # @param id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def get_team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_team"
      end
      # resource path
      local_var_path = '/teams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Delivery
    # @param id [Integer] Delivery ID
    # @param [Hash] opts the optional parameters
    # @return [WebhooksOutgoingDelivery]
    def get_webhooks_outgoing_delivery(id, opts = {})
      data, _status_code, _headers = get_webhooks_outgoing_delivery_with_http_info(id, opts)
      data
    end

    # Retrieve a Delivery
    # @param id [Integer] Delivery ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhooksOutgoingDelivery, Integer, Hash)>] WebhooksOutgoingDelivery data, response status code and response headers
    def get_webhooks_outgoing_delivery_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_webhooks_outgoing_delivery ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_webhooks_outgoing_delivery"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/deliveries/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhooksOutgoingDelivery'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_webhooks_outgoing_delivery",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_webhooks_outgoing_delivery\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Delivery Attempt
    # @param id [Integer] Delivery Attempt ID
    # @param [Hash] opts the optional parameters
    # @return [WebhooksOutgoingDeliveryAttempt]
    def get_webhooks_outgoing_delivery_attempt(id, opts = {})
      data, _status_code, _headers = get_webhooks_outgoing_delivery_attempt_with_http_info(id, opts)
      data
    end

    # Retrieve a Delivery Attempt
    # @param id [Integer] Delivery Attempt ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhooksOutgoingDeliveryAttempt, Integer, Hash)>] WebhooksOutgoingDeliveryAttempt data, response status code and response headers
    def get_webhooks_outgoing_delivery_attempt_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_webhooks_outgoing_delivery_attempt ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_webhooks_outgoing_delivery_attempt"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/delivery_attempts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhooksOutgoingDeliveryAttempt'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_webhooks_outgoing_delivery_attempt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_webhooks_outgoing_delivery_attempt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @return [WebhooksOutgoingEndpoint]
    def get_webhooks_outgoing_endpoint(id, opts = {})
      data, _status_code, _headers = get_webhooks_outgoing_endpoint_with_http_info(id, opts)
      data
    end

    # Retrieve a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhooksOutgoingEndpoint, Integer, Hash)>] WebhooksOutgoingEndpoint data, response status code and response headers
    def get_webhooks_outgoing_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_webhooks_outgoing_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_webhooks_outgoing_endpoint"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/endpoints/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhooksOutgoingEndpoint'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_webhooks_outgoing_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_webhooks_outgoing_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Goals
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<Goal>]
    def list_goals(project_id, opts = {})
      data, _status_code, _headers = list_goals_with_http_info(project_id, opts)
      data
    end

    # List Goals
    # @param project_id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<Goal>, Integer, Hash)>] Array<Goal> data, response status code and response headers
    def list_goals_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_goals ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling V1Api.list_goals"
      end
      # resource path
      local_var_path = '/projects/{project_id}/goals'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Goal>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_goals",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_goals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tags
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<ProjectsTag>]
    def list_projects_tags(team_id, opts = {})
      data, _status_code, _headers = list_projects_tags_with_http_info(team_id, opts)
      data
    end

    # List Tags
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<ProjectsTag>, Integer, Hash)>] Array<ProjectsTag> data, response status code and response headers
    def list_projects_tags_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_projects_tags ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.list_projects_tags"
      end
      # resource path
      local_var_path = '/teams/{team_id}/projects/tags'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProjectsTag>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_projects_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_projects_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Creative Concepts
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<ScaffoldingAbsolutelyAbstractCreativeConcept>]
    def list_scaffolding_absolutely_abstract_creative_concepts(team_id, opts = {})
      data, _status_code, _headers = list_scaffolding_absolutely_abstract_creative_concepts_with_http_info(team_id, opts)
      data
    end

    # List Creative Concepts
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<ScaffoldingAbsolutelyAbstractCreativeConcept>, Integer, Hash)>] Array<ScaffoldingAbsolutelyAbstractCreativeConcept> data, response status code and response headers
    def list_scaffolding_absolutely_abstract_creative_concepts_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_scaffolding_absolutely_abstract_creative_concepts ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.list_scaffolding_absolutely_abstract_creative_concepts"
      end
      # resource path
      local_var_path = '/teams/{team_id}/scaffolding/absolutely_abstract/creative_concepts'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ScaffoldingAbsolutelyAbstractCreativeConcept>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_scaffolding_absolutely_abstract_creative_concepts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_scaffolding_absolutely_abstract_creative_concepts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tangible Things
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<ScaffoldingCompletelyConcreteTangibleThing>]
    def list_scaffolding_completely_concrete_tangible_things(absolutely_abstract_creative_concept_id, opts = {})
      data, _status_code, _headers = list_scaffolding_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts)
      data
    end

    # List Tangible Things
    # @param absolutely_abstract_creative_concept_id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<ScaffoldingCompletelyConcreteTangibleThing>, Integer, Hash)>] Array<ScaffoldingCompletelyConcreteTangibleThing> data, response status code and response headers
    def list_scaffolding_completely_concrete_tangible_things_with_http_info(absolutely_abstract_creative_concept_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_scaffolding_completely_concrete_tangible_things ...'
      end
      # verify the required parameter 'absolutely_abstract_creative_concept_id' is set
      if @api_client.config.client_side_validation && absolutely_abstract_creative_concept_id.nil?
        fail ArgumentError, "Missing the required parameter 'absolutely_abstract_creative_concept_id' when calling V1Api.list_scaffolding_completely_concrete_tangible_things"
      end
      # resource path
      local_var_path = '/scaffolding/absolutely_abstract/creative_concepts/{absolutely_abstract_creative_concept_id}/completely_concrete/tangible_things'.sub('{' + 'absolutely_abstract_creative_concept_id' + '}', CGI.escape(absolutely_abstract_creative_concept_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ScaffoldingCompletelyConcreteTangibleThing>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_scaffolding_completely_concrete_tangible_things",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_scaffolding_completely_concrete_tangible_things\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Teams
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<Team>]
    def list_teams(opts = {})
      data, _status_code, _headers = list_teams_with_http_info(opts)
      data
    end

    # List Teams
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<Team>, Integer, Hash)>] Array<Team> data, response status code and response headers
    def list_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_teams ...'
      end
      # resource path
      local_var_path = '/teams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Team>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Delivery Attempts
    # @param delivery_id [Integer] Delivery ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<WebhooksOutgoingDeliveryAttempt>]
    def list_webhooks_outgoing_delivery_attempts(delivery_id, opts = {})
      data, _status_code, _headers = list_webhooks_outgoing_delivery_attempts_with_http_info(delivery_id, opts)
      data
    end

    # List Delivery Attempts
    # @param delivery_id [Integer] Delivery ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<WebhooksOutgoingDeliveryAttempt>, Integer, Hash)>] Array<WebhooksOutgoingDeliveryAttempt> data, response status code and response headers
    def list_webhooks_outgoing_delivery_attempts_with_http_info(delivery_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_webhooks_outgoing_delivery_attempts ...'
      end
      # verify the required parameter 'delivery_id' is set
      if @api_client.config.client_side_validation && delivery_id.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_id' when calling V1Api.list_webhooks_outgoing_delivery_attempts"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/deliveries/{delivery_id}/delivery_attempts'.sub('{' + 'delivery_id' + '}', CGI.escape(delivery_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WebhooksOutgoingDeliveryAttempt>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_webhooks_outgoing_delivery_attempts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_webhooks_outgoing_delivery_attempts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Deliveries
    # @param endpoint_id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<WebhooksOutgoingDelivery>]
    def list_webhooks_outgoing_deliverys(endpoint_id, opts = {})
      data, _status_code, _headers = list_webhooks_outgoing_deliverys_with_http_info(endpoint_id, opts)
      data
    end

    # List Deliveries
    # @param endpoint_id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<WebhooksOutgoingDelivery>, Integer, Hash)>] Array<WebhooksOutgoingDelivery> data, response status code and response headers
    def list_webhooks_outgoing_deliverys_with_http_info(endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_webhooks_outgoing_deliverys ...'
      end
      # verify the required parameter 'endpoint_id' is set
      if @api_client.config.client_side_validation && endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_id' when calling V1Api.list_webhooks_outgoing_deliverys"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/endpoints/{endpoint_id}/deliveries'.sub('{' + 'endpoint_id' + '}', CGI.escape(endpoint_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WebhooksOutgoingDelivery>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_webhooks_outgoing_deliverys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_webhooks_outgoing_deliverys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Endpoints
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<WebhooksOutgoingEndpoint>]
    def list_webhooks_outgoing_endpoints(team_id, opts = {})
      data, _status_code, _headers = list_webhooks_outgoing_endpoints_with_http_info(team_id, opts)
      data
    end

    # List Endpoints
    # @param team_id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page. (default to 100)
    # @return [Array<(Array<WebhooksOutgoingEndpoint>, Integer, Hash)>] Array<WebhooksOutgoingEndpoint> data, response status code and response headers
    def list_webhooks_outgoing_endpoints_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.list_webhooks_outgoing_endpoints ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling V1Api.list_webhooks_outgoing_endpoints"
      end
      # resource path
      local_var_path = '/teams/{team_id}/webhooks/outgoing/endpoints'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WebhooksOutgoingEndpoint>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.list_webhooks_outgoing_endpoints",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#list_webhooks_outgoing_endpoints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGoalRequest] :create_goal_request 
    # @return [Goal]
    def update_goal(id, opts = {})
      data, _status_code, _headers = update_goal_with_http_info(id, opts)
      data
    end

    # Update a Goal
    # @param id [Integer] Goal ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGoalRequest] :create_goal_request 
    # @return [Array<(Goal, Integer, Hash)>] Goal data, response status code and response headers
    def update_goal_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_goal ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_goal"
      end
      # resource path
      local_var_path = '/goals/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_goal_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Goal'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_goal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectRequest] :create_project_request 
    # @return [Project]
    def update_project(id, opts = {})
      data, _status_code, _headers = update_project_with_http_info(id, opts)
      data
    end

    # Update a Project
    # @param id [Integer] Project ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectRequest] :create_project_request 
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def update_project_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_project"
      end
      # resource path
      local_var_path = '/projects/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_project_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectsTagRequest] :create_projects_tag_request 
    # @return [ProjectsTag]
    def update_projects_tag(id, opts = {})
      data, _status_code, _headers = update_projects_tag_with_http_info(id, opts)
      data
    end

    # Update a Tag
    # @param id [Integer] Tag ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProjectsTagRequest] :create_projects_tag_request 
    # @return [Array<(ProjectsTag, Integer, Hash)>] ProjectsTag data, response status code and response headers
    def update_projects_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_projects_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_projects_tag"
      end
      # resource path
      local_var_path = '/projects/tags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_projects_tag_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_projects_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_projects_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateScaffoldingAbsolutelyAbstractCreativeConceptRequest] :create_scaffolding_absolutely_abstract_creative_concept_request 
    # @return [ScaffoldingAbsolutelyAbstractCreativeConcept]
    def update_scaffolding_absolutely_abstract_creative_concept(id, opts = {})
      data, _status_code, _headers = update_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts)
      data
    end

    # Update a Creative Concept
    # @param id [Integer] Creative Concept ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateScaffoldingAbsolutelyAbstractCreativeConceptRequest] :create_scaffolding_absolutely_abstract_creative_concept_request 
    # @return [Array<(ScaffoldingAbsolutelyAbstractCreativeConcept, Integer, Hash)>] ScaffoldingAbsolutelyAbstractCreativeConcept data, response status code and response headers
    def update_scaffolding_absolutely_abstract_creative_concept_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_scaffolding_absolutely_abstract_creative_concept ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_scaffolding_absolutely_abstract_creative_concept"
      end
      # resource path
      local_var_path = '/scaffolding/absolutely_abstract/creative_concepts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_scaffolding_absolutely_abstract_creative_concept_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingAbsolutelyAbstractCreativeConcept'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_scaffolding_absolutely_abstract_creative_concept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_scaffolding_absolutely_abstract_creative_concept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateScaffoldingCompletelyConcreteTangibleThingRequest] :update_scaffolding_completely_concrete_tangible_thing_request 
    # @return [ScaffoldingCompletelyConcreteTangibleThing]
    def update_scaffolding_completely_concrete_tangible_thing(id, opts = {})
      data, _status_code, _headers = update_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts)
      data
    end

    # Update a Tangible Thing
    # @param id [Integer] Tangible Thing ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateScaffoldingCompletelyConcreteTangibleThingRequest] :update_scaffolding_completely_concrete_tangible_thing_request 
    # @return [Array<(ScaffoldingCompletelyConcreteTangibleThing, Integer, Hash)>] ScaffoldingCompletelyConcreteTangibleThing data, response status code and response headers
    def update_scaffolding_completely_concrete_tangible_thing_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_scaffolding_completely_concrete_tangible_thing ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_scaffolding_completely_concrete_tangible_thing"
      end
      # resource path
      local_var_path = '/scaffolding/completely_concrete/tangible_things/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_scaffolding_completely_concrete_tangible_thing_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ScaffoldingCompletelyConcreteTangibleThing'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_scaffolding_completely_concrete_tangible_thing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_scaffolding_completely_concrete_tangible_thing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Team
    # @param id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamRequest] :create_team_request 
    # @return [Team]
    def update_team(id, opts = {})
      data, _status_code, _headers = update_team_with_http_info(id, opts)
      data
    end

    # Update a Team
    # @param id [Integer] Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeamRequest] :create_team_request 
    # @return [Array<(Team, Integer, Hash)>] Team data, response status code and response headers
    def update_team_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_team ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_team"
      end
      # resource path
      local_var_path = '/teams/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_team_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Team'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWebhooksOutgoingEndpointRequest] :create_webhooks_outgoing_endpoint_request 
    # @return [WebhooksOutgoingEndpoint]
    def update_webhooks_outgoing_endpoint(id, opts = {})
      data, _status_code, _headers = update_webhooks_outgoing_endpoint_with_http_info(id, opts)
      data
    end

    # Update a Endpoint
    # @param id [Integer] Endpoint ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateWebhooksOutgoingEndpointRequest] :create_webhooks_outgoing_endpoint_request 
    # @return [Array<(WebhooksOutgoingEndpoint, Integer, Hash)>] WebhooksOutgoingEndpoint data, response status code and response headers
    def update_webhooks_outgoing_endpoint_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.update_webhooks_outgoing_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.update_webhooks_outgoing_endpoint"
      end
      # resource path
      local_var_path = '/webhooks/outgoing/endpoints/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_webhooks_outgoing_endpoint_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhooksOutgoingEndpoint'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.update_webhooks_outgoing_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#update_webhooks_outgoing_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
